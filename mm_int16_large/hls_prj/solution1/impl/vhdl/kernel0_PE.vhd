-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_0_01294_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_0_01294_empty_n : IN STD_LOGIC;
    fifo_A_PE_0_01294_read : OUT STD_LOGIC;
    fifo_B_PE_0_01566_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_0_01566_empty_n : IN STD_LOGIC;
    fifo_B_PE_0_01566_read : OUT STD_LOGIC;
    fifo_B_PE_1_01567_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_B_PE_1_01567_full_n : IN STD_LOGIC;
    fifo_B_PE_1_01567_write : OUT STD_LOGIC;
    fifo_A_PE_0_11295_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    fifo_A_PE_0_11295_full_n : IN STD_LOGIC;
    fifo_A_PE_0_11295_write : OUT STD_LOGIC;
    fifo_C_drain_PE_0_01838_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    fifo_C_drain_PE_0_01838_full_n : IN STD_LOGIC;
    fifo_C_drain_PE_0_01838_write : OUT STD_LOGIC );
end;


architecture behav of kernel0_PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv17_8000 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal select_ln689_2_reg_2060 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_2_reg_2060_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1069_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_A_PE_0_01294_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fifo_A_PE_0_11295_blk_n : STD_LOGIC;
    signal fifo_B_PE_0_01566_blk_n : STD_LOGIC;
    signal fifo_B_PE_1_01567_blk_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_01838_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1069_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_1_reg_1688 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_1_reg_1688_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln687_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln687_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_3_reg_1699 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_3_reg_1699_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln688_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln688_reg_1704 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln688_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln688_2_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln688_2_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln688_2_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln688_2_reg_1716_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln689_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln689_1_reg_1725 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_V_92_reg_1735 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_93_reg_1740 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_95_reg_1750 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_97_reg_1760 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_99_reg_1770 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_101_reg_1780 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_103_reg_1790 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_106_reg_1805 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_107_reg_1810 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_109_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_111_reg_1830 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_113_reg_1840 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_115_reg_1850 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_117_reg_1860 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_119_reg_1870 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_1_reg_1885 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_61_reg_1895 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_62_reg_1900 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_64_reg_1910 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_66_reg_1920 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_68_reg_1930 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_70_reg_1940 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_72_reg_1950 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_75_reg_1965 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_76_reg_1970 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_78_reg_1980 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_80_reg_1990 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_82_reg_2000 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_84_reg_2010 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_86_reg_2020 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_88_reg_2030 : STD_LOGIC_VECTOR (15 downto 0);
    signal v1_V_reg_2045 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp_i_i135998_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i135998_reg_2050 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i1359_mid1_reg_2055 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_2_fu_1220_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_2_reg_2060_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_2_reg_2060_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal local_C_addr_reg_2064 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_C_addr_reg_2064_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal local_C_addr_reg_2064_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal local_C_addr_reg_2064_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1458_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1472_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1464_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_31_fu_1416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_31_reg_2155 : STD_LOGIC_VECTOR (15 downto 0);
    signal local_C_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal p_cast_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_V_fu_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln870_2_fu_1304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal c6_V_fu_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1069_2_fu_1269_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_236 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln1069_3_fu_1090_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_V_fu_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1069_fu_1238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten13_fu_244 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1069_4_fu_1104_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten39_fu_248 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln1069_5_fu_1118_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten73_fu_252 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_sig_allocacmp_indvar_flatten73_load : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1069_3_fu_355_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1069_2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_3_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln688_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_2_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln689_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1069_fu_1084_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1069_1_fu_1098_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1069_2_fu_1112_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal cmp_i_i97_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069101_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln687_1_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln688_fu_1178_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln870_fu_1195_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmp_i_i_mid1_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln688_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln688_1_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln689_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_fu_1201_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln689_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1069_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1069_1_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_1_fu_1245_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1069_1_fu_1261_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_1245_fu_1281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_fu_1285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1069_fu_1277_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_1246_fu_1293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln687_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln688_1_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln689_1_fu_1334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln728_2_fu_1348_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_2_fu_1348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1625_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_5_fu_1352_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1611_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_5_fu_1352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_5_fu_1352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln728_5_fu_1352_p2 : signal is "no";
    signal add_ln728_2_fu_1348_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_2_fu_1348_p2 : signal is "no";
    signal add_ln728_9_fu_1362_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1583_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_9_fu_1362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1576_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_12_fu_1366_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1597_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_12_fu_1366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1590_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_12_fu_1366_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_12_fu_1366_p2 : signal is "no";
    signal add_ln728_9_fu_1362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_9_fu_1362_p2 : signal is "no";
    signal add_ln728_13_fu_1370_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_6_fu_1356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_17_fu_1382_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_17_fu_1382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_20_fu_1386_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_20_fu_1386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_20_fu_1386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_20_fu_1386_p2 : signal is "no";
    signal add_ln728_17_fu_1382_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_17_fu_1382_p2 : signal is "no";
    signal add_ln728_24_fu_1396_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1555_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_24_fu_1396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_28_fu_1400_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1569_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_28_fu_1400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1562_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_28_fu_1400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_28_fu_1400_p2 : signal is "no";
    signal add_ln728_24_fu_1396_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln728_24_fu_1396_p2 : signal is "no";
    signal add_ln728_29_fu_1404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_21_fu_1390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_30_fu_1410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_14_fu_1376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1434_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1458_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1464_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1472_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1478_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1478_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1484_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1496_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1496_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1502_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1502_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1508_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1514_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1422_ce : STD_LOGIC;
    signal grp_fu_1428_ce : STD_LOGIC;
    signal grp_fu_1434_ce : STD_LOGIC;
    signal grp_fu_1440_ce : STD_LOGIC;
    signal grp_fu_1446_ce : STD_LOGIC;
    signal grp_fu_1452_ce : STD_LOGIC;
    signal grp_fu_1458_ce : STD_LOGIC;
    signal grp_fu_1464_ce : STD_LOGIC;
    signal grp_fu_1472_ce : STD_LOGIC;
    signal grp_fu_1478_ce : STD_LOGIC;
    signal grp_fu_1484_ce : STD_LOGIC;
    signal grp_fu_1490_ce : STD_LOGIC;
    signal grp_fu_1496_ce : STD_LOGIC;
    signal grp_fu_1502_ce : STD_LOGIC;
    signal grp_fu_1508_ce : STD_LOGIC;
    signal grp_fu_1514_ce : STD_LOGIC;
    signal grp_fu_1520_ce : STD_LOGIC;
    signal grp_fu_1527_ce : STD_LOGIC;
    signal grp_fu_1534_ce : STD_LOGIC;
    signal grp_fu_1541_ce : STD_LOGIC;
    signal grp_fu_1548_ce : STD_LOGIC;
    signal grp_fu_1555_ce : STD_LOGIC;
    signal grp_fu_1562_ce : STD_LOGIC;
    signal grp_fu_1569_ce : STD_LOGIC;
    signal grp_fu_1576_ce : STD_LOGIC;
    signal grp_fu_1583_ce : STD_LOGIC;
    signal grp_fu_1590_ce : STD_LOGIC;
    signal grp_fu_1597_ce : STD_LOGIC;
    signal grp_fu_1604_ce : STD_LOGIC;
    signal grp_fu_1611_ce : STD_LOGIC;
    signal grp_fu_1618_ce : STD_LOGIC;
    signal grp_fu_1625_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_mul_mul_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel0_mac_muladd_16s_16s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel0_PE_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    local_C_U : component kernel0_PE_local_C
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_2064_pp0_iter5_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => add_ln728_31_reg_2155);

    mul_mul_16s_16s_16_4_1_U143 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1422_p0,
        din1 => grp_fu_1422_p1,
        ce => grp_fu_1422_ce,
        dout => grp_fu_1422_p2);

    mul_mul_16s_16s_16_4_1_U144 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1428_p0,
        din1 => grp_fu_1428_p1,
        ce => grp_fu_1428_ce,
        dout => grp_fu_1428_p2);

    mul_mul_16s_16s_16_4_1_U145 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1434_p0,
        din1 => grp_fu_1434_p1,
        ce => grp_fu_1434_ce,
        dout => grp_fu_1434_p2);

    mul_mul_16s_16s_16_4_1_U146 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1440_p0,
        din1 => grp_fu_1440_p1,
        ce => grp_fu_1440_ce,
        dout => grp_fu_1440_p2);

    mul_mul_16s_16s_16_4_1_U147 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1446_p0,
        din1 => grp_fu_1446_p1,
        ce => grp_fu_1446_ce,
        dout => grp_fu_1446_p2);

    mul_mul_16s_16s_16_4_1_U148 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1452_p0,
        din1 => grp_fu_1452_p1,
        ce => grp_fu_1452_ce,
        dout => grp_fu_1452_p2);

    mul_mul_16s_16s_16_4_1_U149 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1458_p0,
        din1 => grp_fu_1458_p1,
        ce => grp_fu_1458_ce,
        dout => grp_fu_1458_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U150 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1464_p0,
        din1 => grp_fu_1464_p1,
        din2 => grp_fu_1464_p2,
        ce => grp_fu_1464_ce,
        dout => grp_fu_1464_p3);

    mul_mul_16s_16s_16_4_1_U151 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1472_p0,
        din1 => grp_fu_1472_p1,
        ce => grp_fu_1472_ce,
        dout => grp_fu_1472_p2);

    mul_mul_16s_16s_16_4_1_U152 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1478_p0,
        din1 => grp_fu_1478_p1,
        ce => grp_fu_1478_ce,
        dout => grp_fu_1478_p2);

    mul_mul_16s_16s_16_4_1_U153 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1484_p0,
        din1 => grp_fu_1484_p1,
        ce => grp_fu_1484_ce,
        dout => grp_fu_1484_p2);

    mul_mul_16s_16s_16_4_1_U154 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1490_p0,
        din1 => grp_fu_1490_p1,
        ce => grp_fu_1490_ce,
        dout => grp_fu_1490_p2);

    mul_mul_16s_16s_16_4_1_U155 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1496_p0,
        din1 => grp_fu_1496_p1,
        ce => grp_fu_1496_ce,
        dout => grp_fu_1496_p2);

    mul_mul_16s_16s_16_4_1_U156 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1502_p0,
        din1 => grp_fu_1502_p1,
        ce => grp_fu_1502_ce,
        dout => grp_fu_1502_p2);

    mul_mul_16s_16s_16_4_1_U157 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1508_p0,
        din1 => grp_fu_1508_p1,
        ce => grp_fu_1508_ce,
        dout => grp_fu_1508_p2);

    mul_mul_16s_16s_16_4_1_U158 : component kernel0_mul_mul_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1514_p0,
        din1 => grp_fu_1514_p1,
        ce => grp_fu_1514_ce,
        dout => grp_fu_1514_p2);

    mac_muladd_16s_16s_16ns_16_4_1_U159 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_61_reg_1895,
        din1 => v2_V_92_reg_1735,
        din2 => grp_fu_1422_p2,
        ce => grp_fu_1520_ce,
        dout => grp_fu_1520_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U160 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_62_reg_1900,
        din1 => v2_V_93_reg_1740,
        din2 => grp_fu_1428_p2,
        ce => grp_fu_1527_ce,
        dout => grp_fu_1527_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U161 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_64_reg_1910,
        din1 => v2_V_95_reg_1750,
        din2 => grp_fu_1434_p2,
        ce => grp_fu_1534_ce,
        dout => grp_fu_1534_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U162 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_66_reg_1920,
        din1 => v2_V_97_reg_1760,
        din2 => grp_fu_1440_p2,
        ce => grp_fu_1541_ce,
        dout => grp_fu_1541_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U163 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_68_reg_1930,
        din1 => v2_V_99_reg_1770,
        din2 => grp_fu_1446_p2,
        ce => grp_fu_1548_ce,
        dout => grp_fu_1548_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U164 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_70_reg_1940,
        din1 => v2_V_101_reg_1780,
        din2 => grp_fu_1452_p2,
        ce => grp_fu_1555_ce,
        dout => grp_fu_1555_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U165 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_72_reg_1950,
        din1 => v2_V_103_reg_1790,
        din2 => grp_fu_1458_p2,
        ce => grp_fu_1562_ce,
        dout => grp_fu_1562_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U166 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_75_reg_1965,
        din1 => v2_V_106_reg_1805,
        din2 => grp_fu_1464_p3,
        ce => grp_fu_1569_ce,
        dout => grp_fu_1569_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U167 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_76_reg_1970,
        din1 => v2_V_107_reg_1810,
        din2 => grp_fu_1472_p2,
        ce => grp_fu_1576_ce,
        dout => grp_fu_1576_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U168 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_78_reg_1980,
        din1 => v2_V_109_reg_1820,
        din2 => grp_fu_1478_p2,
        ce => grp_fu_1583_ce,
        dout => grp_fu_1583_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U169 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_80_reg_1990,
        din1 => v2_V_111_reg_1830,
        din2 => grp_fu_1484_p2,
        ce => grp_fu_1590_ce,
        dout => grp_fu_1590_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U170 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_82_reg_2000,
        din1 => v2_V_113_reg_1840,
        din2 => grp_fu_1490_p2,
        ce => grp_fu_1597_ce,
        dout => grp_fu_1597_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U171 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_84_reg_2010,
        din1 => v2_V_115_reg_1850,
        din2 => grp_fu_1496_p2,
        ce => grp_fu_1604_ce,
        dout => grp_fu_1604_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U172 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_86_reg_2020,
        din1 => v2_V_117_reg_1860,
        din2 => grp_fu_1502_p2,
        ce => grp_fu_1611_ce,
        dout => grp_fu_1611_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U173 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v2_V_88_reg_2030,
        din1 => v2_V_119_reg_1870,
        din2 => grp_fu_1508_p2,
        ce => grp_fu_1618_ce,
        dout => grp_fu_1618_p3);

    mac_muladd_16s_16s_16ns_16_4_1_U174 : component kernel0_mac_muladd_16s_16s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v1_V_reg_2045,
        din1 => v1_V_1_reg_1885,
        din2 => grp_fu_1514_p2,
        ce => grp_fu_1625_ce,
        dout => grp_fu_1625_p3);

    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    c2_V_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c2_V_fu_240 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    c2_V_fu_240 <= select_ln1069_fu_1238_p3;
                end if;
            end if; 
        end if;
    end process;

    c6_V_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c6_V_fu_232 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    c6_V_fu_232 <= select_ln1069_2_fu_1269_p3;
                end if;
            end if; 
        end if;
    end process;

    c7_V_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c7_V_fu_228 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    c7_V_fu_228 <= add_ln870_2_fu_1304_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_244 <= ap_const_lv15_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten13_fu_244 <= select_ln1069_4_fu_1104_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten39_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten39_fu_248 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten39_fu_248 <= select_ln1069_5_fu_1118_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten73_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1069_fu_349_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten73_fu_252 <= add_ln1069_3_fu_355_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten73_fu_252 <= ap_const_lv18_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_236 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten_fu_236 <= select_ln1069_3_fu_1090_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln728_31_reg_2155 <= add_ln728_31_fu_1416_p2;
                and_ln687_3_reg_1699_pp0_iter2_reg <= and_ln687_3_reg_1699;
                and_ln688_2_reg_1716_pp0_iter2_reg <= and_ln688_2_reg_1716;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln1069_1_reg_1688_pp0_iter2_reg <= icmp_ln1069_1_reg_1688;
                local_C_addr_reg_2064 <= p_cast_fu_1299_p1(8 - 1 downto 0);
                local_C_addr_reg_2064_pp0_iter3_reg <= local_C_addr_reg_2064;
                local_C_addr_reg_2064_pp0_iter4_reg <= local_C_addr_reg_2064_pp0_iter3_reg;
                local_C_addr_reg_2064_pp0_iter5_reg <= local_C_addr_reg_2064_pp0_iter4_reg;
                select_ln689_2_reg_2060 <= select_ln689_2_fu_1220_p3;
                select_ln689_2_reg_2060_pp0_iter3_reg <= select_ln689_2_reg_2060;
                select_ln689_2_reg_2060_pp0_iter4_reg <= select_ln689_2_reg_2060_pp0_iter3_reg;
                select_ln689_2_reg_2060_pp0_iter5_reg <= select_ln689_2_reg_2060_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln687_3_reg_1699 <= and_ln687_3_fu_405_p2;
                and_ln688_2_reg_1716 <= and_ln688_2_fu_429_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1069_1_reg_1688 <= icmp_ln1069_1_fu_375_p2;
                or_ln688_2_reg_1710 <= or_ln688_2_fu_423_p2;
                or_ln688_reg_1704 <= or_ln688_fu_411_p2;
                or_ln689_1_reg_1725 <= or_ln689_1_fu_441_p2;
                v1_V_1_reg_1885 <= fifo_A_PE_0_01294_dout(511 downto 496);
                v1_V_reg_2045 <= fifo_B_PE_0_01566_dout(511 downto 496);
                v2_V_101_reg_1780 <= fifo_A_PE_0_01294_dout(175 downto 160);
                v2_V_103_reg_1790 <= fifo_A_PE_0_01294_dout(207 downto 192);
                v2_V_106_reg_1805 <= fifo_A_PE_0_01294_dout(255 downto 240);
                v2_V_107_reg_1810 <= fifo_A_PE_0_01294_dout(271 downto 256);
                v2_V_109_reg_1820 <= fifo_A_PE_0_01294_dout(303 downto 288);
                v2_V_111_reg_1830 <= fifo_A_PE_0_01294_dout(335 downto 320);
                v2_V_113_reg_1840 <= fifo_A_PE_0_01294_dout(367 downto 352);
                v2_V_115_reg_1850 <= fifo_A_PE_0_01294_dout(399 downto 384);
                v2_V_117_reg_1860 <= fifo_A_PE_0_01294_dout(431 downto 416);
                v2_V_119_reg_1870 <= fifo_A_PE_0_01294_dout(463 downto 448);
                v2_V_61_reg_1895 <= fifo_B_PE_0_01566_dout(31 downto 16);
                v2_V_62_reg_1900 <= fifo_B_PE_0_01566_dout(47 downto 32);
                v2_V_64_reg_1910 <= fifo_B_PE_0_01566_dout(79 downto 64);
                v2_V_66_reg_1920 <= fifo_B_PE_0_01566_dout(111 downto 96);
                v2_V_68_reg_1930 <= fifo_B_PE_0_01566_dout(143 downto 128);
                v2_V_70_reg_1940 <= fifo_B_PE_0_01566_dout(175 downto 160);
                v2_V_72_reg_1950 <= fifo_B_PE_0_01566_dout(207 downto 192);
                v2_V_75_reg_1965 <= fifo_B_PE_0_01566_dout(255 downto 240);
                v2_V_76_reg_1970 <= fifo_B_PE_0_01566_dout(271 downto 256);
                v2_V_78_reg_1980 <= fifo_B_PE_0_01566_dout(303 downto 288);
                v2_V_80_reg_1990 <= fifo_B_PE_0_01566_dout(335 downto 320);
                v2_V_82_reg_2000 <= fifo_B_PE_0_01566_dout(367 downto 352);
                v2_V_84_reg_2010 <= fifo_B_PE_0_01566_dout(399 downto 384);
                v2_V_86_reg_2020 <= fifo_B_PE_0_01566_dout(431 downto 416);
                v2_V_88_reg_2030 <= fifo_B_PE_0_01566_dout(463 downto 448);
                v2_V_92_reg_1735 <= fifo_A_PE_0_01294_dout(31 downto 16);
                v2_V_93_reg_1740 <= fifo_A_PE_0_01294_dout(47 downto 32);
                v2_V_95_reg_1750 <= fifo_A_PE_0_01294_dout(79 downto 64);
                v2_V_97_reg_1760 <= fifo_A_PE_0_01294_dout(111 downto 96);
                v2_V_99_reg_1770 <= fifo_A_PE_0_01294_dout(143 downto 128);
                xor_ln687_reg_1693 <= xor_ln687_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln688_2_reg_1716))) then
                cmp_i_i135998_reg_2050 <= cmp_i_i135998_fu_1150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln688_2_reg_1716))) then
                cmp_i_i1359_mid1_reg_2055 <= cmp_i_i1359_mid1_fu_1208_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1069_1_fu_1098_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_244) + unsigned(ap_const_lv15_1));
    add_ln1069_2_fu_1112_p2 <= std_logic_vector(unsigned(indvar_flatten39_fu_248) + unsigned(ap_const_lv17_1));
    add_ln1069_3_fu_355_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten73_load) + unsigned(ap_const_lv18_1));
    add_ln1069_fu_1084_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_236) + unsigned(ap_const_lv10_1));
    add_ln728_12_fu_1366_p0 <= grp_fu_1597_p3;
    add_ln728_12_fu_1366_p1 <= grp_fu_1590_p3;
    add_ln728_12_fu_1366_p2 <= std_logic_vector(signed(add_ln728_12_fu_1366_p0) + signed(add_ln728_12_fu_1366_p1));
    add_ln728_13_fu_1370_p2 <= std_logic_vector(unsigned(add_ln728_12_fu_1366_p2) + unsigned(add_ln728_9_fu_1362_p2));
    add_ln728_14_fu_1376_p2 <= std_logic_vector(unsigned(add_ln728_13_fu_1370_p2) + unsigned(add_ln728_6_fu_1356_p2));
    add_ln728_17_fu_1382_p0 <= grp_fu_1527_p3;
    add_ln728_17_fu_1382_p1 <= grp_fu_1520_p3;
    add_ln728_17_fu_1382_p2 <= std_logic_vector(signed(add_ln728_17_fu_1382_p0) + signed(add_ln728_17_fu_1382_p1));
    add_ln728_20_fu_1386_p0 <= grp_fu_1541_p3;
    add_ln728_20_fu_1386_p1 <= grp_fu_1534_p3;
    add_ln728_20_fu_1386_p2 <= std_logic_vector(signed(add_ln728_20_fu_1386_p0) + signed(add_ln728_20_fu_1386_p1));
    add_ln728_21_fu_1390_p2 <= std_logic_vector(unsigned(add_ln728_20_fu_1386_p2) + unsigned(add_ln728_17_fu_1382_p2));
    add_ln728_24_fu_1396_p0 <= grp_fu_1555_p3;
    add_ln728_24_fu_1396_p1 <= grp_fu_1548_p3;
    add_ln728_24_fu_1396_p2 <= std_logic_vector(signed(add_ln728_24_fu_1396_p0) + signed(add_ln728_24_fu_1396_p1));
    add_ln728_28_fu_1400_p0 <= grp_fu_1569_p3;
    add_ln728_28_fu_1400_p1 <= grp_fu_1562_p3;
    add_ln728_28_fu_1400_p2 <= std_logic_vector(signed(add_ln728_28_fu_1400_p0) + signed(add_ln728_28_fu_1400_p1));
    add_ln728_29_fu_1404_p2 <= std_logic_vector(unsigned(add_ln728_28_fu_1400_p2) + unsigned(add_ln728_24_fu_1396_p2));
    add_ln728_2_fu_1348_p0 <= grp_fu_1618_p3;
    add_ln728_2_fu_1348_p1 <= grp_fu_1625_p3;
    add_ln728_2_fu_1348_p2 <= std_logic_vector(signed(add_ln728_2_fu_1348_p0) + signed(add_ln728_2_fu_1348_p1));
    add_ln728_30_fu_1410_p2 <= std_logic_vector(unsigned(add_ln728_29_fu_1404_p2) + unsigned(add_ln728_21_fu_1390_p2));
    add_ln728_31_fu_1416_p2 <= std_logic_vector(unsigned(add_ln728_30_fu_1410_p2) + unsigned(add_ln728_14_fu_1376_p2));
    add_ln728_5_fu_1352_p0 <= grp_fu_1611_p3;
    add_ln728_5_fu_1352_p1 <= grp_fu_1604_p3;
    add_ln728_5_fu_1352_p2 <= std_logic_vector(signed(add_ln728_5_fu_1352_p0) + signed(add_ln728_5_fu_1352_p1));
    add_ln728_6_fu_1356_p2 <= std_logic_vector(unsigned(add_ln728_5_fu_1352_p2) + unsigned(add_ln728_2_fu_1348_p2));
    add_ln728_9_fu_1362_p0 <= grp_fu_1583_p3;
    add_ln728_9_fu_1362_p1 <= grp_fu_1576_p3;
    add_ln728_9_fu_1362_p2 <= std_logic_vector(signed(add_ln728_9_fu_1362_p0) + signed(add_ln728_9_fu_1362_p1));
    add_ln870_1_fu_1245_p2 <= std_logic_vector(unsigned(select_ln689_fu_1201_p3) + unsigned(ap_const_lv5_1));
    add_ln870_2_fu_1304_p2 <= std_logic_vector(unsigned(select_ln1069_1_fu_1261_p3) + unsigned(ap_const_lv5_1));
    add_ln870_fu_1195_p2 <= std_logic_vector(unsigned(select_ln688_fu_1178_p3) + unsigned(ap_const_lv6_1));
    and_ln687_1_fu_1173_p2 <= (xor_ln687_reg_1693 and icmp_ln1069101_fu_1167_p2);
    and_ln687_2_fu_393_p2 <= (xor_ln687_fu_381_p2 and icmp_ln1069_2_fu_387_p2);
    and_ln687_3_fu_405_p2 <= (xor_ln687_fu_381_p2 and icmp_ln1069_3_fu_399_p2);
    and_ln687_fu_1162_p2 <= (xor_ln687_reg_1693 and cmp_i_i97_fu_1156_p2);
    and_ln688_1_fu_1190_p2 <= (or_ln688_2_reg_1710 and and_ln687_1_fu_1173_p2);
    and_ln688_2_fu_429_p2 <= (or_ln688_2_fu_423_p2 and and_ln687_2_fu_393_p2);
    and_ln688_fu_1185_p2 <= (or_ln688_2_reg_1710 and and_ln687_fu_1162_p2);
    and_ln689_fu_1232_p2 <= (xor_ln689_fu_1227_p2 and and_ln688_1_fu_1190_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, fifo_A_PE_0_01294_empty_n, fifo_B_PE_0_01566_empty_n, fifo_B_PE_1_01567_full_n, fifo_A_PE_0_11295_full_n, fifo_C_drain_PE_0_01838_full_n, select_ln689_2_reg_2060_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (fifo_C_drain_PE_0_01838_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((fifo_A_PE_0_11295_full_n = ap_const_logic_0) or (fifo_B_PE_1_01567_full_n = ap_const_logic_0) or (fifo_B_PE_0_01566_empty_n = ap_const_logic_0) or (fifo_A_PE_0_01294_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, fifo_A_PE_0_01294_empty_n, fifo_B_PE_0_01566_empty_n, fifo_B_PE_1_01567_full_n, fifo_A_PE_0_11295_full_n, fifo_C_drain_PE_0_01838_full_n, select_ln689_2_reg_2060_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (fifo_C_drain_PE_0_01838_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((fifo_A_PE_0_11295_full_n = ap_const_logic_0) or (fifo_B_PE_1_01567_full_n = ap_const_logic_0) or (fifo_B_PE_0_01566_empty_n = ap_const_logic_0) or (fifo_A_PE_0_01294_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, fifo_A_PE_0_01294_empty_n, fifo_B_PE_0_01566_empty_n, fifo_B_PE_1_01567_full_n, fifo_A_PE_0_11295_full_n, fifo_C_drain_PE_0_01838_full_n, select_ln689_2_reg_2060_pp0_iter5_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (fifo_C_drain_PE_0_01838_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((fifo_A_PE_0_11295_full_n = ap_const_logic_0) or (fifo_B_PE_1_01567_full_n = ap_const_logic_0) or (fifo_B_PE_0_01566_empty_n = ap_const_logic_0) or (fifo_A_PE_0_01294_empty_n = ap_const_logic_0))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(fifo_A_PE_0_01294_empty_n, fifo_B_PE_0_01566_empty_n, fifo_B_PE_1_01567_full_n, fifo_A_PE_0_11295_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((fifo_A_PE_0_11295_full_n = ap_const_logic_0) or (fifo_B_PE_1_01567_full_n = ap_const_logic_0) or (fifo_B_PE_0_01566_empty_n = ap_const_logic_0) or (fifo_A_PE_0_01294_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(fifo_C_drain_PE_0_01838_full_n, select_ln689_2_reg_2060_pp0_iter5_reg)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (fifo_C_drain_PE_0_01838_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1069_fu_349_p2)
    begin
        if (((icmp_ln1069_fu_349_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten73_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten73_fu_252)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten73_load <= ap_const_lv18_0;
        else 
            ap_sig_allocacmp_indvar_flatten73_load <= indvar_flatten73_fu_252;
        end if; 
    end process;

    cmp_i_i135998_fu_1150_p2 <= "1" when (c2_V_fu_240 = ap_const_lv6_0) else "0";
    cmp_i_i1359_mid1_fu_1208_p2 <= "1" when (add_ln870_fu_1195_p2 = ap_const_lv6_0) else "0";
    cmp_i_i97_fu_1156_p2 <= "1" when (c2_V_fu_240 = ap_const_lv6_1F) else "0";
    cmp_i_i_mid1_fu_1214_p2 <= "1" when (add_ln870_fu_1195_p2 = ap_const_lv6_1F) else "0";
    empty_1245_fu_1281_p1 <= select_ln1069_1_fu_1261_p3(4 - 1 downto 0);
    empty_1246_fu_1293_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_1285_p3) + unsigned(zext_ln1069_fu_1277_p1));

    fifo_A_PE_0_01294_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_A_PE_0_01294_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_0_01294_blk_n <= fifo_A_PE_0_01294_empty_n;
        else 
            fifo_A_PE_0_01294_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_PE_0_01294_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_0_01294_read <= ap_const_logic_1;
        else 
            fifo_A_PE_0_01294_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_0_11295_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_A_PE_0_11295_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_0_11295_blk_n <= fifo_A_PE_0_11295_full_n;
        else 
            fifo_A_PE_0_11295_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_0_11295_din <= fifo_A_PE_0_01294_dout;

    fifo_A_PE_0_11295_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_A_PE_0_11295_write <= ap_const_logic_1;
        else 
            fifo_A_PE_0_11295_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_0_01566_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_B_PE_0_01566_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_0_01566_blk_n <= fifo_B_PE_0_01566_empty_n;
        else 
            fifo_B_PE_0_01566_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_PE_0_01566_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_0_01566_read <= ap_const_logic_1;
        else 
            fifo_B_PE_0_01566_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_1_01567_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_B_PE_1_01567_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_1_01567_blk_n <= fifo_B_PE_1_01567_full_n;
        else 
            fifo_B_PE_1_01567_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_1_01567_din <= fifo_B_PE_0_01566_dout;

    fifo_B_PE_1_01567_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_B_PE_1_01567_write <= ap_const_logic_1;
        else 
            fifo_B_PE_1_01567_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_0_01838_blk_n_assign_proc : process(ap_enable_reg_pp0_iter6, fifo_C_drain_PE_0_01838_full_n, select_ln689_2_reg_2060_pp0_iter5_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            fifo_C_drain_PE_0_01838_blk_n <= fifo_C_drain_PE_0_01838_full_n;
        else 
            fifo_C_drain_PE_0_01838_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_PE_0_01838_din <= add_ln728_31_reg_2155;

    fifo_C_drain_PE_0_01838_write_assign_proc : process(ap_enable_reg_pp0_iter6, select_ln689_2_reg_2060_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln689_2_reg_2060_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            fifo_C_drain_PE_0_01838_write <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_0_01838_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1422_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1422_ce <= ap_const_logic_1;
        else 
            grp_fu_1422_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1422_p0 <= fifo_B_PE_0_01566_dout(16 - 1 downto 0);
    grp_fu_1422_p1 <= fifo_A_PE_0_01294_dout(16 - 1 downto 0);

    grp_fu_1428_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1428_ce <= ap_const_logic_1;
        else 
            grp_fu_1428_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1428_p0 <= fifo_B_PE_0_01566_dout(63 downto 48);
    grp_fu_1428_p1 <= fifo_A_PE_0_01294_dout(63 downto 48);

    grp_fu_1434_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1434_ce <= ap_const_logic_1;
        else 
            grp_fu_1434_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1434_p0 <= fifo_B_PE_0_01566_dout(95 downto 80);
    grp_fu_1434_p1 <= fifo_A_PE_0_01294_dout(95 downto 80);

    grp_fu_1440_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1440_ce <= ap_const_logic_1;
        else 
            grp_fu_1440_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1440_p0 <= fifo_B_PE_0_01566_dout(127 downto 112);
    grp_fu_1440_p1 <= fifo_A_PE_0_01294_dout(127 downto 112);

    grp_fu_1446_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1446_ce <= ap_const_logic_1;
        else 
            grp_fu_1446_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1446_p0 <= fifo_B_PE_0_01566_dout(159 downto 144);
    grp_fu_1446_p1 <= fifo_A_PE_0_01294_dout(159 downto 144);

    grp_fu_1452_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1452_ce <= ap_const_logic_1;
        else 
            grp_fu_1452_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1452_p0 <= fifo_B_PE_0_01566_dout(191 downto 176);
    grp_fu_1452_p1 <= fifo_A_PE_0_01294_dout(191 downto 176);

    grp_fu_1458_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1458_ce <= ap_const_logic_1;
        else 
            grp_fu_1458_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1458_p0 <= fifo_B_PE_0_01566_dout(223 downto 208);
    grp_fu_1458_p1 <= fifo_A_PE_0_01294_dout(223 downto 208);

    grp_fu_1464_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1464_ce <= ap_const_logic_1;
        else 
            grp_fu_1464_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1464_p0 <= fifo_B_PE_0_01566_dout(239 downto 224);
    grp_fu_1464_p1 <= fifo_A_PE_0_01294_dout(239 downto 224);
    grp_fu_1464_p2 <= 
        ap_const_lv16_0 when (select_ln689_1_fu_1334_p3(0) = '1') else 
        local_C_q0;

    grp_fu_1472_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1472_ce <= ap_const_logic_1;
        else 
            grp_fu_1472_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1472_p0 <= fifo_B_PE_0_01566_dout(287 downto 272);
    grp_fu_1472_p1 <= fifo_A_PE_0_01294_dout(287 downto 272);

    grp_fu_1478_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1478_ce <= ap_const_logic_1;
        else 
            grp_fu_1478_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1478_p0 <= fifo_B_PE_0_01566_dout(319 downto 304);
    grp_fu_1478_p1 <= fifo_A_PE_0_01294_dout(319 downto 304);

    grp_fu_1484_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1484_ce <= ap_const_logic_1;
        else 
            grp_fu_1484_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1484_p0 <= fifo_B_PE_0_01566_dout(351 downto 336);
    grp_fu_1484_p1 <= fifo_A_PE_0_01294_dout(351 downto 336);

    grp_fu_1490_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1490_ce <= ap_const_logic_1;
        else 
            grp_fu_1490_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1490_p0 <= fifo_B_PE_0_01566_dout(383 downto 368);
    grp_fu_1490_p1 <= fifo_A_PE_0_01294_dout(383 downto 368);

    grp_fu_1496_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1496_ce <= ap_const_logic_1;
        else 
            grp_fu_1496_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1496_p0 <= fifo_B_PE_0_01566_dout(415 downto 400);
    grp_fu_1496_p1 <= fifo_A_PE_0_01294_dout(415 downto 400);

    grp_fu_1502_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1502_ce <= ap_const_logic_1;
        else 
            grp_fu_1502_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1502_p0 <= fifo_B_PE_0_01566_dout(447 downto 432);
    grp_fu_1502_p1 <= fifo_A_PE_0_01294_dout(447 downto 432);

    grp_fu_1508_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1508_ce <= ap_const_logic_1;
        else 
            grp_fu_1508_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1508_p0 <= fifo_B_PE_0_01566_dout(479 downto 464);
    grp_fu_1508_p1 <= fifo_A_PE_0_01294_dout(479 downto 464);

    grp_fu_1514_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1514_ce <= ap_const_logic_1;
        else 
            grp_fu_1514_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1514_p0 <= fifo_B_PE_0_01566_dout(495 downto 480);
    grp_fu_1514_p1 <= fifo_A_PE_0_01294_dout(495 downto 480);

    grp_fu_1520_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1520_ce <= ap_const_logic_1;
        else 
            grp_fu_1520_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1527_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1527_ce <= ap_const_logic_1;
        else 
            grp_fu_1527_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1534_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1534_ce <= ap_const_logic_1;
        else 
            grp_fu_1534_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1541_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1541_ce <= ap_const_logic_1;
        else 
            grp_fu_1541_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1548_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1548_ce <= ap_const_logic_1;
        else 
            grp_fu_1548_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1555_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1555_ce <= ap_const_logic_1;
        else 
            grp_fu_1555_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1562_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1562_ce <= ap_const_logic_1;
        else 
            grp_fu_1562_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1569_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1569_ce <= ap_const_logic_1;
        else 
            grp_fu_1569_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1576_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1576_ce <= ap_const_logic_1;
        else 
            grp_fu_1576_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1583_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1583_ce <= ap_const_logic_1;
        else 
            grp_fu_1583_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1590_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1590_ce <= ap_const_logic_1;
        else 
            grp_fu_1590_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1597_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1597_ce <= ap_const_logic_1;
        else 
            grp_fu_1597_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1604_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1604_ce <= ap_const_logic_1;
        else 
            grp_fu_1604_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1611_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1611_ce <= ap_const_logic_1;
        else 
            grp_fu_1611_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1618_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1618_ce <= ap_const_logic_1;
        else 
            grp_fu_1618_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1625_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1625_ce <= ap_const_logic_1;
        else 
            grp_fu_1625_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1069101_fu_1167_p2 <= "1" when (c7_V_fu_228 = ap_const_lv5_10) else "0";
    icmp_ln1069_1_fu_375_p2 <= "1" when (indvar_flatten39_fu_248 = ap_const_lv17_8000) else "0";
    icmp_ln1069_2_fu_387_p2 <= "1" when (indvar_flatten_fu_236 = ap_const_lv10_100) else "0";
    icmp_ln1069_3_fu_399_p2 <= "1" when (indvar_flatten13_fu_244 = ap_const_lv15_2000) else "0";
    icmp_ln1069_fu_349_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten73_load = ap_const_lv18_20000) else "0";
    local_C_address0 <= p_cast_fu_1299_p1(8 - 1 downto 0);

    local_C_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1069_1_fu_1256_p2 <= (or_ln688_reg_1704 or or_ln1069_fu_1251_p2);
    or_ln1069_fu_1251_p2 <= (and_ln689_fu_1232_p2 or and_ln688_2_reg_1716);
    or_ln687_fu_1325_p2 <= (icmp_ln1069_1_reg_1688_pp0_iter2_reg or cmp_i_i135998_reg_2050);
    or_ln688_1_fu_1329_p2 <= (or_ln687_fu_1325_p2 or and_ln687_3_reg_1699_pp0_iter2_reg);
    or_ln688_2_fu_423_p2 <= (xor_ln688_fu_417_p2 or icmp_ln1069_1_fu_375_p2);
    or_ln688_fu_411_p2 <= (icmp_ln1069_1_fu_375_p2 or and_ln687_3_fu_405_p2);
    or_ln689_1_fu_441_p2 <= (or_ln689_fu_435_p2 or icmp_ln1069_1_fu_375_p2);
    or_ln689_fu_435_p2 <= (and_ln688_2_fu_429_p2 or and_ln687_3_fu_405_p2);
    p_cast_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_1246_fu_1293_p2),64));
    select_ln1069_1_fu_1261_p3 <= 
        ap_const_lv5_0 when (or_ln1069_1_fu_1256_p2(0) = '1') else 
        c7_V_fu_228;
    select_ln1069_2_fu_1269_p3 <= 
        add_ln870_1_fu_1245_p2 when (and_ln689_fu_1232_p2(0) = '1') else 
        select_ln689_fu_1201_p3;
    select_ln1069_3_fu_1090_p3 <= 
        ap_const_lv10_1 when (or_ln689_1_fu_441_p2(0) = '1') else 
        add_ln1069_fu_1084_p2;
    select_ln1069_4_fu_1104_p3 <= 
        ap_const_lv15_1 when (or_ln688_fu_411_p2(0) = '1') else 
        add_ln1069_1_fu_1098_p2;
    select_ln1069_5_fu_1118_p3 <= 
        ap_const_lv17_1 when (icmp_ln1069_1_fu_375_p2(0) = '1') else 
        add_ln1069_2_fu_1112_p2;
    select_ln1069_fu_1238_p3 <= 
        add_ln870_fu_1195_p2 when (and_ln688_2_reg_1716(0) = '1') else 
        select_ln688_fu_1178_p3;
    select_ln688_fu_1178_p3 <= 
        ap_const_lv6_0 when (or_ln688_reg_1704(0) = '1') else 
        c2_V_fu_240;
    select_ln689_1_fu_1334_p3 <= 
        cmp_i_i1359_mid1_reg_2055 when (and_ln688_2_reg_1716_pp0_iter2_reg(0) = '1') else 
        or_ln688_1_fu_1329_p2;
    select_ln689_2_fu_1220_p3 <= 
        cmp_i_i_mid1_fu_1214_p2 when (and_ln688_2_reg_1716(0) = '1') else 
        and_ln688_fu_1185_p2;
    select_ln689_fu_1201_p3 <= 
        ap_const_lv5_0 when (or_ln689_1_reg_1725(0) = '1') else 
        c6_V_fu_232;
    tmp_2_cast_fu_1285_p3 <= (empty_1245_fu_1281_p1 & ap_const_lv4_0);
    xor_ln687_fu_381_p2 <= (icmp_ln1069_1_fu_375_p2 xor ap_const_lv1_1);
    xor_ln688_fu_417_p2 <= (icmp_ln1069_3_fu_399_p2 xor ap_const_lv1_1);
    xor_ln689_fu_1227_p2 <= (ap_const_lv1_1 xor and_ln688_2_reg_1716);
    zext_ln1069_fu_1277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1069_2_fu_1269_p3),8));
end behav;
