-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_C_drain_IO_L1_out_boundary_wrapper12_Pipeline_VITI_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_C_drain_PE_1_089_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_C_drain_PE_1_089_empty_n : IN STD_LOGIC;
    fifo_C_drain_PE_1_089_read : OUT STD_LOGIC;
    local_C_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_C_V_ce0 : OUT STD_LOGIC;
    local_C_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    local_C_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_C_V_ce1 : OUT STD_LOGIC;
    local_C_V_we1 : OUT STD_LOGIC;
    local_C_V_d1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of kernel0_C_drain_IO_L1_out_boundary_wrapper12_Pipeline_VITI_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1069_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1069_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_C_drain_PE_1_089_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln1069_fu_243_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1069_reg_365 : STD_LOGIC_VECTOR (1 downto 0);
    signal local_C_V_addr_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_v1_V_phi_fu_118_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_v1_V_reg_115 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_v2_V_9_phi_fu_132_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_v2_V_9_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_v2_V_8_phi_fu_146_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_v2_V_8_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_v2_V_phi_fu_160_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_split_V_0_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_v2_V_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln859_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_V_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c7_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln870_6_fu_260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c6_V_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_c6_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1069_10_fu_227_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1069_fu_195_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1069_10_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_fu_207_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1069_fu_219_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_247_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    c6_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1069_fu_189_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c6_V_fu_84 <= select_ln1069_10_fu_227_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c6_V_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    c7_V_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1069_fu_189_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c7_V_fu_80 <= add_ln870_6_fu_260_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c7_V_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1069_fu_189_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_88 <= add_ln1069_fu_195_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1069_reg_361 <= icmp_ln1069_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_fu_189_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_C_V_addr_reg_369 <= zext_ln859_fu_255_p1(4 - 1 downto 0);
                trunc_ln1069_reg_365 <= trunc_ln1069_fu_243_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1069_fu_195_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln870_6_fu_260_p2 <= std_logic_vector(unsigned(select_ln1069_fu_219_p3) + unsigned(ap_const_lv4_1));
    add_ln870_fu_207_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c6_V_load) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, fifo_C_drain_PE_1_089_empty_n, icmp_ln1069_reg_361)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln1069_reg_361 = ap_const_lv1_0) and (fifo_C_drain_PE_1_089_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, fifo_C_drain_PE_1_089_empty_n, icmp_ln1069_reg_361)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln1069_reg_361 = ap_const_lv1_0) and (fifo_C_drain_PE_1_089_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(fifo_C_drain_PE_1_089_empty_n, icmp_ln1069_reg_361)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln1069_reg_361 = ap_const_lv1_0) and (fifo_C_drain_PE_1_089_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1069_fu_189_p2)
    begin
        if (((icmp_ln1069_fu_189_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_v1_V_phi_fu_118_p8_assign_proc : process(fifo_C_drain_PE_1_089_dout, icmp_ln1069_reg_361, local_C_V_q0, trunc_ln1069_reg_365, ap_phi_reg_pp0_iter1_v1_V_reg_115)
    begin
        if ((((trunc_ln1069_reg_365 = ap_const_lv2_1) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_0) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_2) and (icmp_ln1069_reg_361 = ap_const_lv1_0)))) then 
            ap_phi_mux_v1_V_phi_fu_118_p8 <= local_C_V_q0(127 downto 96);
        elsif (((trunc_ln1069_reg_365 = ap_const_lv2_3) and (icmp_ln1069_reg_361 = ap_const_lv1_0))) then 
            ap_phi_mux_v1_V_phi_fu_118_p8 <= fifo_C_drain_PE_1_089_dout;
        else 
            ap_phi_mux_v1_V_phi_fu_118_p8 <= ap_phi_reg_pp0_iter1_v1_V_reg_115;
        end if; 
    end process;


    ap_phi_mux_v2_V_8_phi_fu_146_p8_assign_proc : process(fifo_C_drain_PE_1_089_dout, icmp_ln1069_reg_361, local_C_V_q0, trunc_ln1069_reg_365, ap_phi_reg_pp0_iter1_v2_V_8_reg_143)
    begin
        if (((trunc_ln1069_reg_365 = ap_const_lv2_1) and (icmp_ln1069_reg_361 = ap_const_lv1_0))) then 
            ap_phi_mux_v2_V_8_phi_fu_146_p8 <= fifo_C_drain_PE_1_089_dout;
        elsif ((((trunc_ln1069_reg_365 = ap_const_lv2_0) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_2) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_3) and (icmp_ln1069_reg_361 = ap_const_lv1_0)))) then 
            ap_phi_mux_v2_V_8_phi_fu_146_p8 <= local_C_V_q0(63 downto 32);
        else 
            ap_phi_mux_v2_V_8_phi_fu_146_p8 <= ap_phi_reg_pp0_iter1_v2_V_8_reg_143;
        end if; 
    end process;


    ap_phi_mux_v2_V_9_phi_fu_132_p8_assign_proc : process(fifo_C_drain_PE_1_089_dout, icmp_ln1069_reg_361, local_C_V_q0, trunc_ln1069_reg_365, ap_phi_reg_pp0_iter1_v2_V_9_reg_129)
    begin
        if (((trunc_ln1069_reg_365 = ap_const_lv2_2) and (icmp_ln1069_reg_361 = ap_const_lv1_0))) then 
            ap_phi_mux_v2_V_9_phi_fu_132_p8 <= fifo_C_drain_PE_1_089_dout;
        elsif ((((trunc_ln1069_reg_365 = ap_const_lv2_1) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_0) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_3) and (icmp_ln1069_reg_361 = ap_const_lv1_0)))) then 
            ap_phi_mux_v2_V_9_phi_fu_132_p8 <= local_C_V_q0(95 downto 64);
        else 
            ap_phi_mux_v2_V_9_phi_fu_132_p8 <= ap_phi_reg_pp0_iter1_v2_V_9_reg_129;
        end if; 
    end process;


    ap_phi_mux_v2_V_phi_fu_160_p8_assign_proc : process(fifo_C_drain_PE_1_089_dout, icmp_ln1069_reg_361, trunc_ln1069_reg_365, data_split_V_0_fu_281_p1, ap_phi_reg_pp0_iter1_v2_V_reg_157)
    begin
        if (((trunc_ln1069_reg_365 = ap_const_lv2_0) and (icmp_ln1069_reg_361 = ap_const_lv1_0))) then 
            ap_phi_mux_v2_V_phi_fu_160_p8 <= fifo_C_drain_PE_1_089_dout;
        elsif ((((trunc_ln1069_reg_365 = ap_const_lv2_1) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_2) and (icmp_ln1069_reg_361 = ap_const_lv1_0)) or ((trunc_ln1069_reg_365 = ap_const_lv2_3) and (icmp_ln1069_reg_361 = ap_const_lv1_0)))) then 
            ap_phi_mux_v2_V_phi_fu_160_p8 <= data_split_V_0_fu_281_p1;
        else 
            ap_phi_mux_v2_V_phi_fu_160_p8 <= ap_phi_reg_pp0_iter1_v2_V_reg_157;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_v1_V_reg_115 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_v2_V_8_reg_143 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_v2_V_9_reg_129 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_v2_V_reg_157 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c6_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c6_V_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c6_V_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c6_V_load <= c6_V_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_c7_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c7_V_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c7_V_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c7_V_load <= c7_V_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_88;
        end if; 
    end process;

    data_split_V_0_fu_281_p1 <= local_C_V_q0(32 - 1 downto 0);

    fifo_C_drain_PE_1_089_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_C_drain_PE_1_089_empty_n, icmp_ln1069_reg_361, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1069_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_PE_1_089_blk_n <= fifo_C_drain_PE_1_089_empty_n;
        else 
            fifo_C_drain_PE_1_089_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_C_drain_PE_1_089_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_361, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1069_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fifo_C_drain_PE_1_089_read <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_1_089_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1069_10_fu_213_p2 <= "1" when (ap_sig_allocacmp_c7_V_load = ap_const_lv4_8) else "0";
    icmp_ln1069_fu_189_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    local_C_V_address0 <= zext_ln859_fu_255_p1(4 - 1 downto 0);
    local_C_V_address1 <= local_C_V_addr_reg_369;

    local_C_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_C_V_ce0 <= ap_const_logic_1;
        else 
            local_C_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_C_V_ce1 <= ap_const_logic_1;
        else 
            local_C_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    local_C_V_d1 <= (((ap_phi_mux_v1_V_phi_fu_118_p8 & ap_phi_mux_v2_V_9_phi_fu_132_p8) & ap_phi_mux_v2_V_8_phi_fu_146_p8) & ap_phi_mux_v2_V_phi_fu_160_p8);

    local_C_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_C_V_we1 <= ap_const_logic_1;
        else 
            local_C_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1069_10_fu_227_p3 <= 
        add_ln870_fu_207_p2 when (icmp_ln1069_10_fu_213_p2(0) = '1') else 
        ap_sig_allocacmp_c6_V_load;
    select_ln1069_fu_219_p3 <= 
        ap_const_lv4_0 when (icmp_ln1069_10_fu_213_p2(0) = '1') else 
        ap_sig_allocacmp_c7_V_load;
    tmp_4_fu_235_p3 <= select_ln1069_10_fu_227_p3(2 downto 2);
    tmp_fu_247_p3 <= (select_ln1069_fu_219_p3 & tmp_4_fu_235_p3);
    trunc_ln1069_fu_243_p1 <= select_ln1069_10_fu_227_p3(2 - 1 downto 0);
    zext_ln859_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_247_p3),64));
end behav;
