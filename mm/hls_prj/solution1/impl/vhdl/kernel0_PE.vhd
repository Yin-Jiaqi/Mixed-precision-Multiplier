-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel0_PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fifo_A_PE_0_076_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_PE_0_076_empty_n : IN STD_LOGIC;
    fifo_A_PE_0_076_read : OUT STD_LOGIC;
    fifo_B_PE_0_082_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_PE_0_082_empty_n : IN STD_LOGIC;
    fifo_B_PE_0_082_read : OUT STD_LOGIC;
    fifo_B_PE_1_083_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_B_PE_1_083_full_n : IN STD_LOGIC;
    fifo_B_PE_1_083_write : OUT STD_LOGIC;
    fifo_A_PE_0_177_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_A_PE_0_177_full_n : IN STD_LOGIC;
    fifo_A_PE_0_177_write : OUT STD_LOGIC;
    fifo_C_drain_PE_0_088_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fifo_C_drain_PE_0_088_full_n : IN STD_LOGIC;
    fifo_C_drain_PE_0_088_write : OUT STD_LOGIC );
end;


architecture behav of kernel0_PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv15_2000 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1069_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal select_ln710_1_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1069_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fifo_A_PE_0_076_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fifo_A_PE_0_177_blk_n : STD_LOGIC;
    signal fifo_B_PE_0_082_blk_n : STD_LOGIC;
    signal fifo_B_PE_1_083_blk_n : STD_LOGIC;
    signal fifo_C_drain_PE_0_088_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1069_reg_893_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_reg_893_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_V_1_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_V_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_V_1_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_V_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_V_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_V_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln710_1_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_1_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln710_1_reg_942_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln710_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln710_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_132_fu_659_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_132_reg_951 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_C_addr_reg_956 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_addr_reg_956_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_C_load_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_972_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_1_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal local_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal local_C_ce0 : STD_LOGIC;
    signal local_C_ce1 : STD_LOGIC;
    signal local_C_we1 : STD_LOGIC;
    signal p_cast_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c7_V_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln870_3_fu_675_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal c6_V_fu_118 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1069_3_fu_788_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1069_4_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c5_V_fu_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1069_1_fu_625_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten13_fu_130 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1069_5_fu_701_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal c2_V_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1069_fu_561_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten39_fu_138 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1069_6_fu_715_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten75_fu_142 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1069_7_fu_729_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten119_fu_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten119_load : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1069_4_fu_275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i86_not_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_not_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_2_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln705_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_4_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1069_5_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln705_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln705_1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln706_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_3_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln705_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln706_fu_447_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln706_2_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_fu_497_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmp_i_i86_not_mid1_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_1_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln706_2_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln707_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln706_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln707_fu_515_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln707_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_1_fu_569_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln707_1_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_not_mid1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_mid1_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln707_2_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln710_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln707_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln710_2_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1069_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1069_1_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1069_2_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1069_2_fu_651_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1069_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1069_1_fu_695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1069_2_fu_709_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1069_3_fu_723_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln710_fu_775_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln870_2_fu_782_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_799_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1069_fu_795_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_133_fu_806_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_213_ce : STD_LOGIC;
    signal grp_fu_217_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel0_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_PE_local_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    local_C_U : component kernel0_PE_local_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_C_address0,
        ce0 => local_C_ce0,
        q0 => local_C_q0,
        address1 => local_C_addr_reg_956_pp0_iter15_reg,
        ce1 => local_C_ce1,
        we1 => local_C_we1,
        d1 => add_1_reg_982);

    fadd_32ns_32ns_32_5_full_dsp_1_U60 : component kernel0_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => local_C_load_reg_962,
        din1 => mul_reg_967,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U61 : component kernel0_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_977,
        din1 => mul_1_reg_972_pp0_iter10_reg,
        ce => grp_fu_209_ce,
        dout => grp_fu_209_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U62 : component kernel0_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_213_p0,
        din1 => grp_fu_213_p1,
        ce => grp_fu_213_ce,
        dout => grp_fu_213_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U63 : component kernel0_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_217_p0,
        din1 => grp_fu_217_p1,
        ce => grp_fu_217_ce,
        dout => grp_fu_217_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c2_V_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c2_V_fu_134 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c2_V_fu_134 <= select_ln1069_fu_561_p3;
                end if;
            end if; 
        end if;
    end process;

    c5_V_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c5_V_fu_126 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c5_V_fu_126 <= select_ln1069_1_fu_625_p3;
                end if;
            end if; 
        end if;
    end process;

    c6_V_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c6_V_fu_118 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    c6_V_fu_118 <= select_ln1069_3_fu_788_p3;
                end if;
            end if; 
        end if;
    end process;

    c7_V_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c7_V_fu_114 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    c7_V_fu_114 <= add_ln870_3_fu_675_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten119_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1069_fu_269_p2 = ap_const_lv1_0))) then 
                    indvar_flatten119_fu_146 <= add_ln1069_4_fu_275_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten119_fu_146 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten13_fu_130 <= ap_const_lv11_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_130 <= select_ln1069_5_fu_701_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten39_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten39_fu_138 <= ap_const_lv13_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten39_fu_138 <= select_ln1069_6_fu_715_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten75_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten75_fu_142 <= ap_const_lv15_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten75_fu_142 <= select_ln1069_7_fu_729_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten_fu_122 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0))) then 
                    indvar_flatten_fu_122 <= select_ln1069_4_fu_687_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_1_reg_982 <= grp_fu_209_p2;
                add_reg_977 <= grp_fu_205_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1069_reg_893_pp0_iter2_reg <= icmp_ln1069_reg_893_pp0_iter1_reg;
                local_C_addr_reg_956 <= p_cast_fu_812_p1(6 - 1 downto 0);
                local_C_addr_reg_956_pp0_iter10_reg <= local_C_addr_reg_956_pp0_iter9_reg;
                local_C_addr_reg_956_pp0_iter11_reg <= local_C_addr_reg_956_pp0_iter10_reg;
                local_C_addr_reg_956_pp0_iter12_reg <= local_C_addr_reg_956_pp0_iter11_reg;
                local_C_addr_reg_956_pp0_iter13_reg <= local_C_addr_reg_956_pp0_iter12_reg;
                local_C_addr_reg_956_pp0_iter14_reg <= local_C_addr_reg_956_pp0_iter13_reg;
                local_C_addr_reg_956_pp0_iter15_reg <= local_C_addr_reg_956_pp0_iter14_reg;
                local_C_addr_reg_956_pp0_iter5_reg <= local_C_addr_reg_956;
                local_C_addr_reg_956_pp0_iter6_reg <= local_C_addr_reg_956_pp0_iter5_reg;
                local_C_addr_reg_956_pp0_iter7_reg <= local_C_addr_reg_956_pp0_iter6_reg;
                local_C_addr_reg_956_pp0_iter8_reg <= local_C_addr_reg_956_pp0_iter7_reg;
                local_C_addr_reg_956_pp0_iter9_reg <= local_C_addr_reg_956_pp0_iter8_reg;
                mul_1_reg_972 <= grp_fu_217_p2;
                mul_1_reg_972_pp0_iter10_reg <= mul_1_reg_972_pp0_iter9_reg;
                mul_1_reg_972_pp0_iter6_reg <= mul_1_reg_972;
                mul_1_reg_972_pp0_iter7_reg <= mul_1_reg_972_pp0_iter6_reg;
                mul_1_reg_972_pp0_iter8_reg <= mul_1_reg_972_pp0_iter7_reg;
                mul_1_reg_972_pp0_iter9_reg <= mul_1_reg_972_pp0_iter8_reg;
                mul_reg_967 <= grp_fu_213_p2;
                select_ln710_1_reg_942_pp0_iter10_reg <= select_ln710_1_reg_942_pp0_iter9_reg;
                select_ln710_1_reg_942_pp0_iter11_reg <= select_ln710_1_reg_942_pp0_iter10_reg;
                select_ln710_1_reg_942_pp0_iter12_reg <= select_ln710_1_reg_942_pp0_iter11_reg;
                select_ln710_1_reg_942_pp0_iter13_reg <= select_ln710_1_reg_942_pp0_iter12_reg;
                select_ln710_1_reg_942_pp0_iter14_reg <= select_ln710_1_reg_942_pp0_iter13_reg;
                select_ln710_1_reg_942_pp0_iter15_reg <= select_ln710_1_reg_942_pp0_iter14_reg;
                select_ln710_1_reg_942_pp0_iter4_reg <= select_ln710_1_reg_942;
                select_ln710_1_reg_942_pp0_iter5_reg <= select_ln710_1_reg_942_pp0_iter4_reg;
                select_ln710_1_reg_942_pp0_iter6_reg <= select_ln710_1_reg_942_pp0_iter5_reg;
                select_ln710_1_reg_942_pp0_iter7_reg <= select_ln710_1_reg_942_pp0_iter6_reg;
                select_ln710_1_reg_942_pp0_iter8_reg <= select_ln710_1_reg_942_pp0_iter7_reg;
                select_ln710_1_reg_942_pp0_iter9_reg <= select_ln710_1_reg_942_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln710_reg_946 <= and_ln710_fu_619_p2;
                empty_132_reg_951 <= empty_132_fu_659_p1;
                or_ln710_1_reg_937 <= or_ln710_1_fu_581_p2;
                select_ln710_1_reg_942 <= select_ln710_1_fu_599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1069_reg_893 <= icmp_ln1069_fu_269_p2;
                icmp_ln1069_reg_893_pp0_iter1_reg <= icmp_ln1069_reg_893;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                local_C_load_reg_962 <= local_C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v1_V_1_reg_902 <= fifo_A_PE_0_076_dout(63 downto 32);
                v1_V_reg_912 <= fifo_B_PE_0_082_dout(63 downto 32);
                v2_V_1_reg_897 <= v2_V_1_fu_286_p1;
                v2_V_reg_907 <= v2_V_fu_300_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1069_1_fu_695_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_130) + unsigned(ap_const_lv11_1));
    add_ln1069_2_fu_709_p2 <= std_logic_vector(unsigned(indvar_flatten39_fu_138) + unsigned(ap_const_lv13_1));
    add_ln1069_3_fu_723_p2 <= std_logic_vector(unsigned(indvar_flatten75_fu_142) + unsigned(ap_const_lv15_1));
    add_ln1069_4_fu_275_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten119_load) + unsigned(ap_const_lv16_1));
    add_ln1069_fu_681_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_122) + unsigned(ap_const_lv8_1));
    add_ln870_1_fu_569_p2 <= std_logic_vector(unsigned(select_ln707_fu_515_p3) + unsigned(ap_const_lv4_1));
    add_ln870_2_fu_782_p2 <= std_logic_vector(unsigned(select_ln710_fu_775_p3) + unsigned(ap_const_lv4_1));
    add_ln870_3_fu_675_p2 <= std_logic_vector(unsigned(select_ln1069_2_fu_651_p3) + unsigned(ap_const_lv4_1));
    add_ln870_fu_497_p2 <= std_logic_vector(unsigned(select_ln706_fu_447_p3) + unsigned(ap_const_lv3_1));
    and_ln705_1_fu_411_p2 <= (xor_ln705_fu_387_p2 and icmp_ln1069_3_fu_405_p2);
    and_ln705_2_fu_423_p2 <= (xor_ln705_fu_387_p2 and icmp_ln1069_4_fu_417_p2);
    and_ln705_3_fu_435_p2 <= (xor_ln705_fu_387_p2 and icmp_ln1069_5_fu_429_p2);
    and_ln705_fu_399_p2 <= (xor_ln705_fu_387_p2 and icmp_ln1069_2_fu_393_p2);
    and_ln706_1_fu_485_p2 <= (or_ln706_3_fu_473_p2 and and_ln705_1_fu_411_p2);
    and_ln706_2_fu_491_p2 <= (or_ln706_3_fu_473_p2 and and_ln705_2_fu_423_p2);
    and_ln706_fu_479_p2 <= (or_ln706_3_fu_473_p2 and and_ln705_fu_399_p2);
    and_ln707_1_fu_555_p2 <= (xor_ln707_fu_543_p2 and and_ln706_1_fu_485_p2);
    and_ln707_fu_549_p2 <= (xor_ln707_fu_543_p2 and and_ln706_fu_479_p2);
    and_ln710_fu_619_p2 <= (or_ln710_2_fu_613_p2 and and_ln707_fu_549_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_0_076_empty_n, icmp_ln1069_reg_893, fifo_B_PE_0_082_empty_n, fifo_B_PE_1_083_full_n, fifo_A_PE_0_177_full_n, fifo_C_drain_PE_0_088_full_n, select_ln710_1_reg_942_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_0_088_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_083_full_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((fifo_B_PE_0_082_empty_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_076_empty_n = ap_const_logic_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_177_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_0_076_empty_n, icmp_ln1069_reg_893, fifo_B_PE_0_082_empty_n, fifo_B_PE_1_083_full_n, fifo_A_PE_0_177_full_n, fifo_C_drain_PE_0_088_full_n, select_ln710_1_reg_942_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_0_088_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_083_full_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((fifo_B_PE_0_082_empty_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_076_empty_n = ap_const_logic_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_177_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, fifo_A_PE_0_076_empty_n, icmp_ln1069_reg_893, fifo_B_PE_0_082_empty_n, fifo_B_PE_1_083_full_n, fifo_A_PE_0_177_full_n, fifo_C_drain_PE_0_088_full_n, select_ln710_1_reg_942_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_0_088_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fifo_B_PE_1_083_full_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((fifo_B_PE_0_082_empty_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_076_empty_n = ap_const_logic_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_177_full_n = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter16_assign_proc : process(fifo_C_drain_PE_0_088_full_n, select_ln710_1_reg_942_pp0_iter15_reg)
    begin
                ap_block_state17_pp0_stage0_iter16 <= ((select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0) and (fifo_C_drain_PE_0_088_full_n = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(fifo_A_PE_0_076_empty_n, icmp_ln1069_reg_893, fifo_B_PE_0_082_empty_n, fifo_B_PE_1_083_full_n, fifo_A_PE_0_177_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((fifo_B_PE_1_083_full_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((fifo_B_PE_0_082_empty_n = ap_const_logic_0) and (icmp_ln1069_reg_893 = ap_const_lv1_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_076_empty_n = ap_const_logic_0)) or ((icmp_ln1069_reg_893 = ap_const_lv1_0) and (fifo_A_PE_0_177_full_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1069_fu_269_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1069_fu_269_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln1069_reg_893_pp0_iter2_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1069_reg_893_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten119_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten119_fu_146)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten119_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten119_load <= indvar_flatten119_fu_146;
        end if; 
    end process;

    brmerge_fu_348_p2 <= (cmp_i_i_not_fu_342_p2 or cmp_i_i86_not_fu_336_p2);
    brmerge_mid1_fu_593_p2 <= (select_ln707_1_fu_529_p3 or cmp_i_i_not_mid1_fu_587_p2);
    cmp_i_i86_not_fu_336_p2 <= "0" when (c2_V_fu_134 = ap_const_lv3_3) else "1";
    cmp_i_i86_not_mid1_fu_523_p2 <= "0" when (add_ln870_fu_497_p2 = ap_const_lv3_3) else "1";
    cmp_i_i_not_fu_342_p2 <= "0" when (c5_V_fu_126 = ap_const_lv4_7) else "1";
    cmp_i_i_not_mid1_fu_587_p2 <= "0" when (add_ln870_1_fu_569_p2 = ap_const_lv4_7) else "1";
    empty_132_fu_659_p1 <= select_ln1069_2_fu_651_p3(3 - 1 downto 0);
    empty_133_fu_806_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_799_p3) + unsigned(zext_ln1069_fu_795_p1));

    fifo_A_PE_0_076_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fifo_A_PE_0_076_empty_n, icmp_ln1069_reg_893, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_A_PE_0_076_blk_n <= fifo_A_PE_0_076_empty_n;
        else 
            fifo_A_PE_0_076_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_A_PE_0_076_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_PE_0_076_read <= ap_const_logic_1;
        else 
            fifo_A_PE_0_076_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_A_PE_0_177_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, fifo_A_PE_0_177_full_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_A_PE_0_177_blk_n <= fifo_A_PE_0_177_full_n;
        else 
            fifo_A_PE_0_177_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_A_PE_0_177_din <= fifo_A_PE_0_076_dout;

    fifo_A_PE_0_177_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_A_PE_0_177_write <= ap_const_logic_1;
        else 
            fifo_A_PE_0_177_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_0_082_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, fifo_B_PE_0_082_empty_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_B_PE_0_082_blk_n <= fifo_B_PE_0_082_empty_n;
        else 
            fifo_B_PE_0_082_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fifo_B_PE_0_082_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_PE_0_082_read <= ap_const_logic_1;
        else 
            fifo_B_PE_0_082_read <= ap_const_logic_0;
        end if; 
    end process;


    fifo_B_PE_1_083_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, fifo_B_PE_1_083_full_n, ap_block_pp0_stage0)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fifo_B_PE_1_083_blk_n <= fifo_B_PE_1_083_full_n;
        else 
            fifo_B_PE_1_083_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_B_PE_1_083_din <= fifo_B_PE_0_082_dout;

    fifo_B_PE_1_083_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1069_reg_893, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1069_reg_893 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fifo_B_PE_1_083_write <= ap_const_logic_1;
        else 
            fifo_B_PE_1_083_write <= ap_const_logic_0;
        end if; 
    end process;


    fifo_C_drain_PE_0_088_blk_n_assign_proc : process(ap_enable_reg_pp0_iter16, fifo_C_drain_PE_0_088_full_n, select_ln710_1_reg_942_pp0_iter15_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0))) then 
            fifo_C_drain_PE_0_088_blk_n <= fifo_C_drain_PE_0_088_full_n;
        else 
            fifo_C_drain_PE_0_088_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_C_drain_PE_0_088_din <= add_1_reg_982;

    fifo_C_drain_PE_0_088_write_assign_proc : process(ap_enable_reg_pp0_iter16, select_ln710_1_reg_942_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln710_1_reg_942_pp0_iter15_reg = ap_const_lv1_0))) then 
            fifo_C_drain_PE_0_088_write <= ap_const_logic_1;
        else 
            fifo_C_drain_PE_0_088_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_205_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_205_ce <= ap_const_logic_1;
        else 
            grp_fu_205_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_209_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_209_ce <= ap_const_logic_1;
        else 
            grp_fu_209_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_213_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_213_ce <= ap_const_logic_1;
        else 
            grp_fu_213_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_213_p0 <= v2_V_1_reg_897;
    grp_fu_213_p1 <= v2_V_reg_907;

    grp_fu_217_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_217_ce <= ap_const_logic_1;
        else 
            grp_fu_217_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_217_p0 <= v1_V_1_reg_902;
    grp_fu_217_p1 <= v1_V_reg_912;
    icmp_ln1069_1_fu_369_p2 <= "1" when (indvar_flatten75_fu_142 = ap_const_lv15_2000) else "0";
    icmp_ln1069_2_fu_393_p2 <= "1" when (c7_V_fu_114 = ap_const_lv4_8) else "0";
    icmp_ln1069_3_fu_405_p2 <= "1" when (indvar_flatten_fu_122 = ap_const_lv8_40) else "0";
    icmp_ln1069_4_fu_417_p2 <= "1" when (indvar_flatten13_fu_130 = ap_const_lv11_200) else "0";
    icmp_ln1069_5_fu_429_p2 <= "1" when (indvar_flatten39_fu_138 = ap_const_lv13_800) else "0";
    icmp_ln1069_fu_269_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten119_load = ap_const_lv16_8000) else "0";
    local_C_address0 <= p_cast_fu_812_p1(6 - 1 downto 0);

    local_C_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce0 <= ap_const_logic_1;
        else 
            local_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_ce1 <= ap_const_logic_1;
        else 
            local_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_C_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            local_C_we1 <= ap_const_logic_1;
        else 
            local_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1069_1_fu_639_p2 <= (or_ln707_fu_503_p2 or or_ln1069_fu_633_p2);
    or_ln1069_2_fu_645_p2 <= (or_ln1069_1_fu_639_p2 or icmp_ln1069_1_fu_369_p2);
    or_ln1069_fu_633_p2 <= (and_ln710_fu_619_p2 or and_ln707_1_fu_555_p2);
    or_ln705_1_fu_381_p2 <= (icmp_ln1069_1_fu_369_p2 or brmerge_fu_348_p2);
    or_ln705_fu_375_p2 <= (icmp_ln1069_1_fu_369_p2 or cmp_i_i86_not_fu_336_p2);
    or_ln706_1_fu_455_p2 <= (or_ln705_fu_375_p2 or and_ln705_3_fu_435_p2);
    or_ln706_2_fu_461_p2 <= (or_ln705_1_fu_381_p2 or and_ln705_3_fu_435_p2);
    or_ln706_3_fu_473_p2 <= (xor_ln706_fu_467_p2 or icmp_ln1069_1_fu_369_p2);
    or_ln706_fu_441_p2 <= (icmp_ln1069_1_fu_369_p2 or and_ln705_3_fu_435_p2);
    or_ln707_1_fu_509_p2 <= (or_ln707_fu_503_p2 or icmp_ln1069_1_fu_369_p2);
    or_ln707_2_fu_537_p2 <= (or_ln706_2_fu_461_p2 or and_ln706_2_fu_491_p2);
    or_ln707_fu_503_p2 <= (and_ln706_2_fu_491_p2 or and_ln705_3_fu_435_p2);
    or_ln710_1_fu_581_p2 <= (or_ln710_fu_575_p2 or or_ln706_fu_441_p2);
    or_ln710_2_fu_613_p2 <= (xor_ln710_fu_607_p2 or and_ln706_2_fu_491_p2);
    or_ln710_fu_575_p2 <= (and_ln707_1_fu_555_p2 or and_ln706_2_fu_491_p2);
    p_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_133_fu_806_p2),64));
    select_ln1069_1_fu_625_p3 <= 
        add_ln870_1_fu_569_p2 when (and_ln707_1_fu_555_p2(0) = '1') else 
        select_ln707_fu_515_p3;
    select_ln1069_2_fu_651_p3 <= 
        ap_const_lv4_0 when (or_ln1069_2_fu_645_p2(0) = '1') else 
        c7_V_fu_114;
    select_ln1069_3_fu_788_p3 <= 
        add_ln870_2_fu_782_p2 when (and_ln710_reg_946(0) = '1') else 
        select_ln710_fu_775_p3;
    select_ln1069_4_fu_687_p3 <= 
        ap_const_lv8_1 when (or_ln710_1_fu_581_p2(0) = '1') else 
        add_ln1069_fu_681_p2;
    select_ln1069_5_fu_701_p3 <= 
        ap_const_lv11_1 when (or_ln707_1_fu_509_p2(0) = '1') else 
        add_ln1069_1_fu_695_p2;
    select_ln1069_6_fu_715_p3 <= 
        ap_const_lv13_1 when (or_ln706_fu_441_p2(0) = '1') else 
        add_ln1069_2_fu_709_p2;
    select_ln1069_7_fu_729_p3 <= 
        ap_const_lv15_1 when (icmp_ln1069_1_fu_369_p2(0) = '1') else 
        add_ln1069_3_fu_723_p2;
    select_ln1069_fu_561_p3 <= 
        add_ln870_fu_497_p2 when (and_ln706_2_fu_491_p2(0) = '1') else 
        select_ln706_fu_447_p3;
    select_ln706_fu_447_p3 <= 
        ap_const_lv3_0 when (or_ln706_fu_441_p2(0) = '1') else 
        c2_V_fu_134;
    select_ln707_1_fu_529_p3 <= 
        cmp_i_i86_not_mid1_fu_523_p2 when (and_ln706_2_fu_491_p2(0) = '1') else 
        or_ln706_1_fu_455_p2;
    select_ln707_fu_515_p3 <= 
        ap_const_lv4_0 when (or_ln707_1_fu_509_p2(0) = '1') else 
        c5_V_fu_126;
    select_ln710_1_fu_599_p3 <= 
        brmerge_mid1_fu_593_p2 when (and_ln707_1_fu_555_p2(0) = '1') else 
        or_ln707_2_fu_537_p2;
    select_ln710_fu_775_p3 <= 
        ap_const_lv4_0 when (or_ln710_1_reg_937(0) = '1') else 
        c6_V_fu_118;
    tmp_1_cast_fu_799_p3 <= (empty_132_reg_951 & ap_const_lv3_0);
    v2_V_1_fu_286_p1 <= fifo_A_PE_0_076_dout(32 - 1 downto 0);
    v2_V_fu_300_p1 <= fifo_B_PE_0_082_dout(32 - 1 downto 0);
    xor_ln705_fu_387_p2 <= (icmp_ln1069_1_fu_369_p2 xor ap_const_lv1_1);
    xor_ln706_fu_467_p2 <= (icmp_ln1069_5_fu_429_p2 xor ap_const_lv1_1);
    xor_ln707_fu_543_p2 <= (ap_const_lv1_1 xor and_ln706_2_fu_491_p2);
    xor_ln710_fu_607_p2 <= (ap_const_lv1_1 xor and_ln706_1_fu_485_p2);
    zext_ln1069_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1069_3_fu_788_p3),6));
end behav;
